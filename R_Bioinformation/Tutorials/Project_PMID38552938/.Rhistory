# 将基因名作为行名
tibble::column_to_rownames("SYMBOL") %>%
select(-PROBEID, -ENTREZID)  # 移除不需要的列
# 2.2 处理多对一映射
expr_with_annot <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
inner_join(annotations, by = "PROBEID") %>%
group_by(SYMBOL) %>%
mutate(mean_expr = rowMeans(select(., -PROBEID, -SYMBOL, -ENTREZID))) %>%
top_n(1, mean_expr) %>%  # 每个基因保留表达量最高的探针
ungroup() %>%
select(-mean_expr)
# 2.2 处理多对一映射
expr_with_annot <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
inner_join(annotations, by = "PROBEID") %>%
group_by(SYMBOL) %>%
mutate(mean_expr = rowMeans(select(., -PROBEID, -SYMBOL, -ENTREZID))) %>%
top_n(1, mean_expr) %>%  # 每个基因保留表达量最高的探针
ungroup() %>%
select(-mean_expr)
# 2.2 处理多对一映射
expr_with_annot <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
inner_join(probe_annot, by = "PROBEID") %>%
group_by(SYMBOL) %>%
mutate(mean_expr = rowMeans(select(., -PROBEID, -SYMBOL, -ENTREZID))) %>%
top_n(1, mean_expr) %>%  # 每个基因保留表达量最高的探针
ungroup() %>%
select(-mean_expr)
annot_table <- Table(gpl)   # 提取注释表
colnames(annot_table)       # 查看可用列
probe_annot <- annot_table[, c("ID", "Gene Symbol")]  # 选择需要的列（通常是ID和Gene Symbol）列名可能因平台而异
colnames(probe_annot) <- c("PROBEID", "SYMBOL", "ENTREZID")  # 标准化列名
probe_annot <- annot_table[, c("ID", "Gene Symbol", "Entrez Gene")]  # 选择需要的列（通常是ID和Gene Symbol）列名可能因平台而异
colnames(probe_annot) <- c("PROBEID", "SYMBOL", "ENTREZID")  # 标准化列名
probe_annot <- probe_annot[probe_annot$SYMBOL != "" & !is.na(probe_annot$SYMBOL), ]   # 去除空值或无效注释
# 2.2 处理多对一映射
expr_with_annot <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
inner_join(probe_annot, by = "PROBEID") %>%
group_by(SYMBOL) %>%
mutate(mean_expr = rowMeans(select(., -PROBEID, -SYMBOL, -ENTREZID))) %>%
top_n(1, mean_expr) %>%  # 每个基因保留表达量最高的探针
ungroup() %>%
select(-mean_expr)
library(hgu219)
BiocManager::install(hgu219)
BiocManager::install("hgu219.db")
library(hgu219)
BiocManager::install("hgu133plus2.db.db")
BiocManager::install("hgu133plus2.db")
library(hgu133plus2.db)
probe_ids <- rownames(sample_matrix)  # 假设exprs_data是你的表达矩阵，行名为探针ID
annotations <- select(hgu219.db, keys=probe_ids, columns=c("SYMBOL", "ENTREZID", "GENENAME"), keytype="PROBEID")
annotations <- select(hgu133plus2.db, keys=probe_ids, columns=c("SYMBOL", "ENTREZID", "GENENAME"), keytype="PROBEID")
annotations <- select(hgu133plus2.db, keys=probe_ids, columns=c("SYMBOL", "ENTREZID", "GENENAME"), keytype="PROBEID")
library(hgu133plus2.db)
annotations <- select(hgu133plus2.db, keys=probe_ids, columns=c("SYMBOL", "ENTREZID", "GENENAME"), keytype="PROBEID")
VIEW(hgu133plus2.db)
view(hgu133plus2.db)
colnames(hgu133plus2.db)
annot_table <- Table(hgu133plus2.db)   # 提取注释表
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("hgu133plus2.db")
library(hgu133plus2.db)
probe_ids <- rownames(sample_matrix)  # 假设exprs_data是你的表达矩阵，行名为探针ID
annotations <- select(hgu133plus2.db, keys=probe_ids, columns=c("SYMBOL", "ENTREZID", "GENENAME"), keytype="PROBEID")
options("repos"="https://mirrors.ustc.edu.cn/CRAN/")
if(!require("BiocManager")) install.packages("BiocManager",update = F,ask = F)
options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("hgu133plus2.db")
library(hgu133plus2.db)
probe_ids <- rownames(sample_matrix)  # 假设exprs_data是你的表达矩阵，行名为探针ID
annotations <- select(hgu133plus2.db, keys=probe_ids, columns=c("SYMBOL", "ENTREZID", "GENENAME"), keytype="PROBEID")
remove.packages("hgu133plus2.db")
BiocManager::install("hgu133plus2.db")
source("D:/0Clinical_Group/3Manuscript/0Methods/R_Bioinformation/Tutorials/Project_PMID38552938/test_Probe_annotate.R", echo = TRUE)
output_dir = './DATA/'
gse_number = 'GSE83500'
filename <-  paste(output_dir, gse_number, '/step1output.Rdata', sep = "", collapse = NULL)
load(file = filename)
options("repos"="https://mirrors.ustc.edu.cn/CRAN/")
if(!require("BiocManager")) install.packages("BiocManager",update = F,ask = F)
options(BioC_mirror="https://mirrors.ustc.edu.cn/bioc/")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("hgu133plus2.db")
library(hgu133plus2.db)
probe_ids <- rownames(sample_matrix)  # 假设exprs_data是你的表达矩阵，行名为探针ID
annotations <- select(hgu133plus2.db, keys=probe_ids, columns=c("SYMBOL", "ENTREZID", "GENENAME"), keytype="PROBEID")
View(annotations)
View(annotations)
colnames(hgu133plus2.db)
annot_preview <- select(hgu133plus2.db,
keys = probe_ids,
columns = columns(hgu133plus2.db),  # 获取所有字段
keytype = "PROBEID")
available_keytypes <- keytypes(hgu133plus2.db)
print(available_keytypes)
head(hgu133plus2.db)
hgu133plus2.db[1:4,1:4]
probe_ids <- head(keys(hgu133plus2.db, keytype = "PROBEID"), 10)  # 前10个探针
view(probe_ids )
view(probe_ids)
probe_ids
head(probe_ids)
probe_ids
probe_ids <- head(keys(hgu133plus2.db, keytype = c("SYMBOL", "ENTREZID", "GENENAME"), 10)  # 前10个探针
probe_ids <- head(keys(hgu133plus2.db, keytype = c("SYMBOL", "ENTREZID", "GENENAME")), 10)  # 前10个探针
probe_ids <- head(keys(hgu133plus2.db, keytype = "SYMBOL"), 10)  # 前10个探针
head(keys(hgu133plus2.db, keytype = "SYMBOL"), 10)  # 前10个探针
head(keys(hgu133plus2.db, keytype = "ENTREZID"), 10)  # 前10个探针
head(keys(hgu133plus2.db, keytype = "GENENAME"), 10)  # 前10个探针
probe_ids <- rownames(sample_matrix)  # 假设exprs_data是你的表达矩阵，行名为探针ID
annotations <- select(hgu133plus2.db, keys=probe_ids, columns=c("SYMBOL", "ENTREZID", "GENENAME"), keytype="PROBEID")
head(keys(hgu133plus2.db, keytype = "PROBEID"), 10)  # 前10个探针
sum(!is.na(annotations$SYMBOL))
sum(!is.na(annotations$ENTREZID))
sum(!is.na(annotations$NAME))
sum(!is.na(annotations$GENENAME))
sum(!is.na(annotations$PROBEID))
gpl <- getGEO("GPL570", destdir = ".")  # 下载平台信息
annot_table <- Table(gpl)   # 提取注释表
colnames(annot_table)       # 查看可用列
gpl <- getGEO("GPL570", destdir = ".")  # 下载平台信息
library(GEOquery)
gpl <- getGEO("GPL570", destdir = ".")  # 下载平台信息
annot_table <- Table(gpl)   # 提取注释表
colnames(annot_table)       # 查看可用列
head(annot_table$ID)
head(annot_table$SYMBOL)
head(annot_table$Gene Symbol)
head(annot_table$`Gene Symbol`)
head(annot_table$`Entrez Gene`)
head(annot_table$`ENTREZ_GENE_ID`)
probe_annot <- annot_table[, c("ID", "Gene Symbol", "ENTREZ_GENE_ID")]  # 选择需要的列（通常是ID和Gene Symbol）列名可能因平台而异
colnames(probe_annot) <- c("PROBEID", "SYMBOL", "ENTREZID")  # 标准化列名
probe_annot <- probe_annot[probe_annot$SYMBOL != "" & !is.na(probe_annot$SYMBOL), ]   # 去除空值或无效注释
# 2.1 获取探针注释包
gpl <- getGEO(gpl_number, destdir = ".")  # 下载平台信息
annot_table <- Table(gpl)   # 提取注释表
colnames(annot_table)       # 查看可用列
head(annot_table$ID)
head(annot_table$'Gene Symbol')
head(annot_table$'Entrez Gene')
probe_annot <- annot_table[, c("ID", "Gene Symbol", "Entrez Gene")]  # 选择需要的列（通常是ID和Gene Symbol）列名可能因平台而异
colnames(probe_annot) <- c("PROBEID", "SYMBOL", "ENTREZID")  # 标准化列名
probe_annot <- probe_annot[probe_annot$SYMBOL != "" & !is.na(probe_annot$SYMBOL), ]   # 去除空值或无效注释
# 2.2 处理多对一映射
expr_with_annot <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
inner_join(probe_annot, by = "PROBEID") %>%
group_by(SYMBOL) %>%
mutate(mean_expr = rowMeans(select(., -PROBEID, -SYMBOL, -ENTREZID))) %>%
top_n(1, mean_expr) %>%  # 每个基因保留表达量最高的探针
ungroup() %>%
select(-mean_expr)
# 2.2 处理多对一映射
expr_with_annot <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
inner_join(probe_annot, by = "PROBEID") %>%
group_by(SYMBOL) %>%
mutate(mean_expr = rowMeans(select(., -PROBEID, -SYMBOL, -ENTREZID))) %>%
top_n(1, mean_expr) %>%  # 每个基因保留表达量最高的探针
ungroup() %>%
select(-mean_expr)
library(Biobase)
library(stringr)
library(dplyr)
library(AnnotationDbi)
# 2.2 处理多对一映射
expr_with_annot <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
inner_join(probe_annot, by = "PROBEID") %>%
group_by(SYMBOL) %>%
mutate(mean_expr = rowMeans(select(., -PROBEID, -SYMBOL, -ENTREZID))) %>%
top_n(1, mean_expr) %>%  # 每个基因保留表达量最高的探针
ungroup() %>%
select(-mean_expr)
keytypes(probe_annot$ENTREZID)
# 将表达矩阵与注释合并
exprs_data <- as.data.frame(sample_matrix)
exprs_data$PROBEID <- rownames(exprs_data)
merged_data <- merge(exprs_data, probe_annot, by="PROBEID")
head(merged_data)
# 去除没有注释的探针
merged_data <- merged_data[!is.na(merged_data$SYMBOL), ]
# 处理多个探针对应一个基因：取平均值
library(dplyr)
# 处理多个探针对应一个基因：取平均值
exprs_annotated <- merged_data %>%
select(-PROBEID, -ENTREZID, -GENENAME) %>%  # 去掉不需要的列
group_by(SYMBOL) %>%
summarise_all(mean)
source("D:/0Clinical_Group/3Manuscript/0Methods/R_Bioinformation/Tutorials/Project_PMID38552938/step1.R", echo = TRUE)
# 2.2 处理多对一映射
expr_with_annot <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
inner_join(probe_annot, by = "PROBEID") %>%
group_by(SYMBOL) %>%
# mutate(mean_expr = rowMeans(select(., -PROBEID, -SYMBOL, -ENTREZID))) %>%
# top_n(1, mean_expr) %>%  # 每个基因保留表达量最高的探针
# ungroup() %>%
# select(-mean_expr)
# 2.3 创建注释感知的表达矩阵
annotated_expr_matrix <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
left_join(annotations, by = "PROBEID") %>%
# 去除没有注释的探针
filter(!is.na(SYMBOL) & SYMBOL != "") %>%
# 可以选择保留一个探针 per 基因
group_by(SYMBOL) %>%
slice(1) %>%  # 保留每个基因的第一个探针
ungroup() %>%
# 将基因名作为行名
tibble::column_to_rownames("SYMBOL") %>%
select(-PROBEID, -ENTREZID)  # 移除不需要的列
# 2.2 处理多对一映射
expr_with_annot <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
inner_join(probe_annot, by = "PROBEID") %>%
group_by(SYMBOL) %>%
# mutate(mean_expr = rowMeans(select(., -PROBEID, -SYMBOL, -ENTREZID))) %>%
# top_n(1, mean_expr) %>%  # 每个基因保留表达量最高的探针
# ungroup() %>%
# select(-mean_expr)
# 2.3 创建注释感知的表达矩阵
annotated_expr_matrix <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
left_join(annotations, by = "PROBEID") %>%
# 去除没有注释的探针
filter(!is.na(SYMBOL) & SYMBOL != "") %>%
# 可以选择保留一个探针 per 基因
group_by(SYMBOL) %>%
slice(1) %>%  # 保留每个基因的第一个探针
ungroup() %>%
# 将基因名作为行名
tibble::column_to_rownames("SYMBOL") %>%
select(-PROBEID, -ENTREZID)  # 移除不需要的列
probe_annot <- probe_annot[probe_annot$SYMBOL != "" & !is.na(probe_annot$SYMBOL), ]   # 去除空值或无效注释
# 2.2 处理多对一映射
expr_with_annot <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
inner_join(probe_annot, by = "PROBEID") %>%
group_by(SYMBOL) %>%
# mutate(mean_expr = rowMeans(select(., -PROBEID, -SYMBOL, -ENTREZID))) %>%
# top_n(1, mean_expr) %>%  # 每个基因保留表达量最高的探针
# ungroup() %>%
# select(-mean_expr)
# 2.3 创建注释感知的表达矩阵
annotated_expr_matrix <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
left_join(annotations, by = "PROBEID") %>%
# 去除没有注释的探针
filter(!is.na(SYMBOL) & SYMBOL != "") %>%
# 可以选择保留一个探针 per 基因
group_by(SYMBOL) %>%
slice(1) %>%  # 保留每个基因的第一个探针
ungroup() %>%
# 将基因名作为行名
tibble::column_to_rownames("SYMBOL") %>%
select(-PROBEID, -ENTREZID)  # 移除不需要的列
# 2.2 处理多对一映射
expr_with_annot <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
inner_join(probe_annot, by = "PROBEID") %>%
group_by(SYMBOL)
View(expr_with_annot)
View(expr_with_annot)
library(GEOquery)
library(Biobase)
library(stringr)
library(dplyr)
library(AnnotationDbi)
rm(list = ls()) #清空变量
gc()
###  1.数据读取----------------------------------------------
output_dir = './DATA/'
gse_number = 'GSE83500'
filename <-  paste(output_dir, gse_number, '/step1output.Rdata', sep = "", collapse = NULL)
load(file = filename)
View(sample_matrix)
View(sample_matrix)
# 1.Group----实验分组要去阅读临床信息的表格来获取，每个GSE的都不一样
Group=ifelse(str_detect(sample_metadata$source_name_ch1,"non-MI"),
"non-MI",
"MI")
#设置参考水平，指定levels，对照组在前，处理组在后
Group = factor(Group,
levels = c("non-MI","MI"))
group
Group
# 2.1 获取探针注释包
gpl <- getGEO(gpl_number, destdir = ".")  # 下载平台信息
annot_table <- Table(gpl)   # 提取注释表
View(annot_table)
View(annot_table)
library(GEOquery)
library(Biobase)
library(stringr)
library(dplyr)
library(AnnotationDbi)
rm(list = ls()) #清空变量
gc()
###  1.数据读取----------------------------------------------
output_dir = './DATA/'
gse_number = 'GSE83500'
filename <-  paste(output_dir, gse_number, '/step1output.Rdata', sep = "", collapse = NULL)
load(file = filename)
# 1.Group----实验分组要去阅读临床信息的表格来获取，每个GSE的都不一样
Group=ifelse(str_detect(sample_metadata$source_name_ch1,"non-MI"),
"non-MI",
"MI")
#设置参考水平，指定levels，对照组在前，处理组在后
Group = factor(Group,
levels = c("non-MI","MI"))
# 2.1 获取探针注释包
gpl <- getGEO(gpl_number, destdir = ".")  # 下载平台信息
annot_table <- Table(gpl)   # 提取注释表
colnames(annot_table)       # 查看可用列
probe_annot <- annot_table[, c("ID", "Gene Symbol", "Entrez Gene")]  # 选择需要的列（通常是ID和Gene Symbol）列名可能因平台而异
View(probe_annot)
colnames(probe_annot) <- c("PROBEID", "SYMBOL", "ENTREZID")  # 标准化列名
probe_annot <- probe_annot[probe_annot$SYMBOL != "" & !is.na(probe_annot$SYMBOL), ]   # 去除空值或无效注释
View(sample_matrix)
View(sample_matrix)
View(probe_annot)
View(probe_annot)
View(sample_matrix)
View(probe_annot)
test <- paste0("Gene", 1:50)
test
probe2gene_test <- data.frame(
probe = rownames(expr_matrix),
gene = sample(gene_symbols, 100, replace = TRUE)
)
expr_matrix <- matrix(rnorm(1000), nrow=100, dimnames=list(paste0("Probe", 1:100), paste0("Sample", 1:10)))
View(expr_matrix)
View(expr_matrix)
probe2gene <- data.frame(
probe = rownames(expr_matrix),
gene = sample(test, 100, replace = TRUE)
)
View(probe2gene)
View(expr_matrix)
ccc <- rownames(expr_matrix)
View(expr_matrix)
mean_expr <- rowMeans(expr_matrix)
mean_expr
View(expr_matrix)
View(probe2gene)
probe2gene$mean_expr <- mean_expr[probe2gene$probe]
View(expr_matrix)
test
View(expr_matrix)
View(sample_matrix)
ccc
View(expr_matrix)
ddd <- rowMeans(expr_matrix[1])
ddd <- rowMeans(expr_matrix[1,1])
ddd <- rowMeans(expr_matrix[1,])
ddd <- Means(expr_matrix[1,])
ddd <- Mean(expr_matrix[1,])
ddd <- mean(expr_matrix[1,]
)
selected_probes <- probe2gene %>%
group_by(gene) %>%
arrange(desc(mean_expr)) %>%
slice(1) %>%        # 取每组第一行（即表达最高的探针）
pull(probe)
class(probe2gene$gene)
class(probe2gene$probe)
class(probe2gene$mean_expr)
library(dplyr)
selected_probes <- probe2gene %>%
group_by(gene) %>%
selected_probes <- probe2gene %>%
group_by(gene)
View(selected_probes)
View(selected_probes)
View(selected_probes)
class(mean_expr)
class(probe2gene)
probe2gene$mean_expr <- as.vector(mean_expr[probe2gene$probe])
class(probe2gene$mean_expr)
selected_probes <- probe2gene %>%
group_by(gene) %>%
arrange(desc(mean_expr)) %>%
slice(1) %>%
pull(probe)
View(selected_probes)
selected_probes <- probe2gene %>%
group_by(gene) %>%
arrange(desc(mean_expr))
selected_probes %>% slice(1)
selected_probes %>% slice(1, mean_expr)
which(sapply(selected_probes , class) == "Rle")
which(sapply(selected_probes , class) == "list")
rm(ls())
rm(list = ls())
source("D:/0Clinical_Group/3Manuscript/0Methods/R_Bioinformation/Tutorials/Project_PMID38552938/test_Probe_annotate.R", echo = TRUE)
source("D:/0Clinical_Group/3Manuscript/0Methods/R_Bioinformation/Tutorials/Project_PMID38552938/test_Probe_annotate.R", echo = TRUE)
source("D:/0Clinical_Group/3Manuscript/0Methods/R_Bioinformation/Tutorials/Project_PMID38552938/test_Probe_annotate.R", echo = TRUE)
View(collapse_result)
View(probe2gene)
View(probe2gene)
View(expr_matrix)
View(expr_collapsed)
View(collapse_result)
collapse_result[["group2row"]]
collapse_result[["datETcollapsed"]]
library(GEOquery)
library(Biobase)
library(stringr)
library(dplyr)
library(AnnotationDbi)
rm(list = ls()) #清空变量
gc()
###  1.数据读取----------------------------------------------
output_dir = './DATA/'
gse_number = 'GSE83500'
filename <-  paste(output_dir, gse_number, '/step1output.Rdata', sep = "", collapse = NULL)
load(file = filename)
# 2.1 获取探针注释包
gpl <- getGEO(gpl_number, destdir = ".")  # 下载平台信息
annot_table <- Table(gpl)   # 提取注释表
colnames(annot_table)       # 查看可用列
probe_annot <- annot_table[, c("ID", "Gene Symbol", "Entrez Gene")]  # 选择需要的列（通常是ID和Gene Symbol）列名可能因平台而异
colnames(probe_annot) <- c("PROBEID", "SYMBOL", "ENTREZID")  # 标准化列名
probe_annot <- probe_annot[probe_annot$SYMBOL != "" & !is.na(probe_annot$SYMBOL), ]   # 去除空值或无效注释
sample_metdata[1:5,1:5]
sample_metadata[1:5,1:5]
head(probe_annot)
Gene Symbol`))
probe_annot$SYMBOL'))
probe_annot$SYMBOL
View(sample_matrix)
dim(sample_matrix)
# 2.2 处理多对一映射
expr_with_annot <- sample_matrix %>%
as.data.frame() %>%
tibble::rownames_to_column("PROBEID") %>%
inner_join(probe_annot, by = "PROBEID") %>%
group_by(SYMBOL) %>%
mutate(mean_expr = rowMeans(select(., -PROBEID, -SYMBOL, -ENTREZID))) %>%
top_n(1, mean_expr) %>%  # 每个基因保留表达量最高的探针
ungroup() %>%
select(-mean_expr)
# 获取探针到基因的映射
probe_ids <- rownames(sample_matrix)
gene_symbols <- mapIds(probe_annot,
keys = probe_ids,
column = "SYMBOL",
keytype = "PROBEID",
multiVals = "first")  # 对于多映射，取第一个
View(probe_annot)
gene_symbols <- mapIds(probe_annot,
keys = PROBEID,
column = "SYMBOL",
keytype = "PROBEID",
multiVals = "first")  # 对于多映射，取第一个
# 计算平均表达量并选择最高表达的探针
mean_expr <- rowMeans(sample_matrix)
probe_annot$mean_expr <- mean_expr[probe_annot$PROBEID]
View(probe_annot)
# 确保所有列为普通向量类型
probe_annot <- as.data.frame(lapply(probe_annot, as.vector), stringsAsFactors = FALSE)
# 按基因分组并找到每个基因中表达量最高的探针
probe2gene_ordered <- probe_annot[order(probe_annot$SYMBOL, -probe_annot$mean_expr), ]
View(probe2gene_ordered)
View(probe_annot)
# 使用 duplicated() 函数获取每个基因的第一个（最高表达）探针
selected_probes <- probe2gene_ordered[!duplicated(probe2gene_ordered$SYMBOL), "probe"]
View(probe2gene_ordered)
# 使用 duplicated() 函数获取每个基因的第一个（最高表达）探针
selected_probes <- probe2gene_ordered[!duplicated(probe2gene_ordered$SYMBOL), "PROBEID"]
rownames(expr_filtered) <- probe2gene_ordered$SYMBOL[match(selected_probes, probe2gene_ordered$PROBEID)]
# 筛选表达矩阵
expr_filtered <- sample_matrix[selected_probes, ]
rownames(expr_filtered) <- probe2gene_ordered$SYMBOL[match(selected_probes, probe2gene_ordered$PROBEID)]
View(expr_filtered)
View(sample_matrix)
dim(sample_matrix)
dim(expr_filtered)
# 2.4 验证注释质量
# 检查注释覆盖率
total_probes <- length(probe_ids)
annotated_probes <- sum(!is.na(annotations$SYMBOL) & annotations$SYMBOL != "")
annotated_probes <- sum(!is.na(probe_annot$SYMBOL) & probe_annot$SYMBOL != "")
coverage_rate <- annotated_probes / total_probes * 100
cat(sprintf("注释覆盖率: %.2f%%\n", coverage_rate))
# 检查基因数量
unique_genes <- length(unique(probe_annot$SYMBOL[!is.na(probe_annot$SYMBOL)]))
cat(sprintf("唯一基因数量: %d\n", unique_genes))
